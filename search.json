[{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://poissonconsulting.github.io/checkr/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://poissonconsulting.github.io/checkr/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://poissonconsulting.github.io/checkr/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://poissonconsulting.github.io/checkr/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://poissonconsulting.github.io/checkr/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://poissonconsulting.github.io/checkr/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://poissonconsulting.github.io/checkr/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://poissonconsulting.github.io/checkr/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://poissonconsulting.github.io/checkr/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://poissonconsulting.github.io/checkr/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://poissonconsulting.github.io/checkr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to checkr","title":"Contributing to checkr","text":"outlines propose change checkr.","code":""},{"path":"https://poissonconsulting.github.io/checkr/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to checkr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://poissonconsulting.github.io/checkr/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to checkr","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://poissonconsulting.github.io/checkr/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to checkr","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. Begin commit merge messages - indicate user facing changes included NEWS.md. use fledge automatically generate NEWS.md file.","code":""},{"path":"https://poissonconsulting.github.io/checkr/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to checkr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://poissonconsulting.github.io/checkr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to checkr","text":"Please note checkr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://poissonconsulting.github.io/checkr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Poisson Consulting Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://poissonconsulting.github.io/checkr/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with checkr","title":"Getting help with checkr","text":"Thanks using checkr! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://poissonconsulting.github.io/checkr/SUPPORT.html","id":"make-sure-its-new","dir":"","previous_headings":"","what":"Make sure its new","title":"Getting help with checkr","text":"opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://poissonconsulting.github.io/checkr/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with checkr","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/articles/assertive-programming.html","id":"base","dir":"Articles","previous_headings":"Package Overview","what":"base","title":"Packages for Assertive Programming","text":"base package offers stopifnot() function. error message helpful user doesn’t know .character() tests . function behaves follows:","code":"height <- dplyr::starwars$height stopifnot(is.character(height)) #> Error: is.character(height) is not TRUE my_fun <- function(x) stopifnot(is.character(x)) my_fun(height) #> Error in my_fun(height): is.character(x) is not TRUE"},{"path":"https://poissonconsulting.github.io/checkr/articles/assertive-programming.html","id":"assertthat","dir":"Articles","previous_headings":"Package Overview","what":"assertthat","title":"Packages for Assertive Programming","text":"assertthat package offers assert_that(). error message big improvement stopifnot()’s. function behaves follows: Perhaps neatest feature ability set error message assertion function using on_failure().","code":"library(assertthat) assert_that(is.character(height)) #> Error: height is not a character vector my_fun <- function(x) assert_that(is.character(x)) my_fun(dplyr::starwars$height) #> Error: x is not a character vector is.character2 <- function(x) is.character(x) on_failure(is.character2) <- function(call, env) {   paste0(deparse(call$x), \" must be a character - sort it out!\") } assert_that(is.character2(height)) #> Error: height must be a character - sort it out!"},{"path":"https://poissonconsulting.github.io/checkr/articles/assertive-programming.html","id":"checkmate","dir":"Articles","previous_headings":"Package Overview","what":"checkmate","title":"Packages for Assertive Programming","text":"checkmate package provides plethora functions check type related properties common objects. function behaves follows addition, assert() function allows multiple alternative check** functions (return string error message failure TRUE success) combined one assertion.","code":"library(checkmate) assert_character(height) #> Error: Assertion on 'height' failed: Must be of type 'character', not 'integer'. my_fun <- function(x) assert_character(x) my_fun(height) #> Error in my_fun(height): Assertion on 'x' failed: Must be of type 'character', not 'integer'. assert(checkCharacter(height), checkFactor(height)) #> Error: Assertion failed. One of the following must apply: #>  * checkCharacter(height): Must be of type 'character', not 'integer' #>  * checkFactor(height): Must be of type 'factor', not 'integer'"},{"path":"https://poissonconsulting.github.io/checkr/articles/assertive-programming.html","id":"checkr","dir":"Articles","previous_headings":"Package Overview","what":"checkr","title":"Packages for Assertive Programming","text":"checkr package provides set expressive functions test values objects. function behaves follows: multiple alternative checks can combined using checkor() function.","code":"library(checkr) check_vector(height, \"\") #> Warning: `check_vector()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_vector(), chk::check_dim(), chk::chk_unique(), #>   chk::chk_sorted(), chk::chk_named(), and/or chk::check_values() instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Error: height must be class character my_fun <- function(x) check_vector(x, \"\") my_fun(height) #> Error: x must be class character checkor(check_vector(height, \"\"), check_vector(height, 1)) #> Warning: `checkor()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chkor()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Error: height must be class character OR height must be class numeric"},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/articles/assertive-programming.html","id":"return-values","dir":"Articles","previous_headings":"Package Comparison","what":"Return Values","title":"Packages for Assertive Programming","text":"checks passed stopifnot() returns invisible NULL, assert_that() returns TRUE. contrast, checkmate::assert_** checkr::check_** return copy original object allows used pipes.","code":""},{"path":"https://poissonconsulting.github.io/checkr/articles/assertive-programming.html","id":"custom-error-messages","dir":"Articles","previous_headings":"Package Comparison","what":"Custom Error Messages","title":"Packages for Assertive Programming","text":"Although way customize error message produced stopifnot(), assert_that() allows programmer specify message individual test using msg argument. case checkmate checkr programmer can specify variable name using .var.name x_name argument, respectively. can helpful functions.","code":"my_fun <- function(x) check_vector(x, \"\", x_name = substitute(x)) my_fun(height) #> Error: height must be class character"},{"path":"https://poissonconsulting.github.io/checkr/articles/assertive-programming.html","id":"speed","dir":"Articles","previous_headings":"Package Comparison","what":"Speed","title":"Packages for Assertive Programming","text":"Much checkmate package written C minimize execution time.","code":""},{"path":"https://poissonconsulting.github.io/checkr/articles/assertive-programming.html","id":"dependencies","dir":"Articles","previous_headings":"Package Comparison","what":"Dependencies","title":"Packages for Assertive Programming","text":"Whereas checkmate package depends backports utils, assertthat depends tools, checkr depends err base dependency-free.","code":""},{"path":"https://poissonconsulting.github.io/checkr/articles/checkr-naming.html","id":"primary-objects","dir":"Articles","previous_headings":"","what":"Primary Objects","title":"checkr Naming Schemes","text":"discussed Data Structures chapter Advanced R Hadley Wickham, five main object types defined dimensionality (1d, 2d nd) whether homogenous heterogenous. Currently check_vector(), check_list() check_data() functions allow user check type values three main type (atomic) vectors, lists data frames. check_matrix() check_array() equivalents yet implemented. functions named according type object check. worth noting vector, matrix array definitely pass check_homogenous() function, list data frame may pass elements identical classes.","code":""},{"path":"https://poissonconsulting.github.io/checkr/articles/checkr-naming.html","id":"scalars","dir":"Articles","previous_headings":"","what":"Scalars","title":"checkr Naming Schemes","text":"addition (atomic) vectors checkr package also identifies scalars R (atomic) vectors one element. can tested using check_scalar() function. Often function arguments scalars particular type. example default mean() function argument na.rm logical indicating whether NA values stripped. checkr package provides following functions test whether objects non-missing scalars particular types: check_lgl(): non-missing logical scalar .e. TRUE FALSE check_int(): non-missing integer .e. 1L check_dbl(): non-missing double scalar .e. 1.1 check_prop(): non-missing double scalar zero one, .e. 0.35 check_chr(): non-missing character scalar, .e. \"text\" check_date(): non-missing Date scalar .e. .Date(\"2001-02-03\") check_dttm(): non-missing POSIXct scalar also worth noting almost scalar functions include argument coerce set TRUE tests whether object satisfies condition coercing required type. test passes function returns coerced object.","code":""},{"path":"https://poissonconsulting.github.io/checkr/articles/checkr-naming.html","id":"other-objects","dir":"Articles","previous_headings":"","what":"Other Objects","title":"checkr Naming Schemes","text":"Functions test whether object another type object include check_null(), check_environment() check_function(). addition check_classes() check_inherits() functions can used check classes inheritance object.","code":""},{"path":"https://poissonconsulting.github.io/checkr/articles/checkr-naming.html","id":"function-functions","dir":"Articles","previous_headings":"","what":"Function Functions","title":"checkr Naming Schemes","text":"Many checking functions named according main base function use. Thus check_nrow() function uses nrow() function check number rows check_nlevels() function uses nlevels() function. important realize functions check type object simply whether return value base function(s) consistent user defined conditions. Functions fall category include check_class(), check_colnames(), check_length(), check_levels(), check_names(), check_nchar(), check_ncol(), check_nlevels(), check_nrow() check_sorted().","code":""},{"path":"https://poissonconsulting.github.io/checkr/articles/checkr-naming.html","id":"data-functions","dir":"Articles","previous_headings":"","what":"Data Functions","title":"checkr Naming Schemes","text":"check_join() function tests whether columns one data frame form many--one join corresponding columns second data frame. check_key() function tests whether specific columns unique. useful testing whether set data frames can archived relational database.","code":""},{"path":"https://poissonconsulting.github.io/checkr/articles/checkr-naming.html","id":"miscellaneous-functions","dir":"Articles","previous_headings":"","what":"Miscellaneous Functions","title":"checkr Naming Schemes","text":"remaining functions captured naming schemes include checkor(), check_named(), check_pattern(), check_regex(), check_sorted(), check_tzone(), check_unique(), check_unnamed() check_unused().","code":""},{"path":"https://poissonconsulting.github.io/checkr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joe Thorley. Author, maintainer. Evan Amies-Galonski. Contributor.           -3188 . Copyright holder, funder.","code":""},{"path":"https://poissonconsulting.github.io/checkr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Joe Thorley (2018). checkr: R package Assertive Programming. Journal Open Source Software, 3(23), 624. URL https://doi.org/10.21105/joss.00624","code":"@Article{,   title = {checkr: {An} {R} package for {Assertive} {Programming}},   author = {Joe Thorley},   journal = {Journal of Open Source Software},   year = {2018},   volume = {3},   number = {23},   pages = {624},   url = {http://joss.theoj.org/papers/10.21105/joss.00624}, }"},{"path":"https://poissonconsulting.github.io/checkr/index.html","id":"checkr","dir":"","previous_headings":"","what":"Check the Properties of Common R Objects","title":"Check the Properties of Common R Objects","text":"checkr superseded chk package. checkr light-weight R package expressive, assertive, pipe-friendly functions check properties common R objects. case failure functions, designed used scripts packages, issue informative error messages. overview functions see checkr-naming vignette comparison similar packages see assertive-programming vignette.","code":""},{"path":"https://poissonconsulting.github.io/checkr/index.html","id":"demonstration","dir":"","previous_headings":"","what":"Demonstration","title":"Check the Properties of Common R Objects","text":"following code demonstrates check_data() function","code":"library(checkr)  # the starwars data frame in the dplyr package fails many of these checks check_data(dplyr::starwars, values = list(   height = c(66L, 264L),   name = \"\",   mass = c(20,1358, NA),   hair_color = c(\"blond\", \"brown\", \"black\", NA),   gender = c(\"male\", \"female\", \"hermaphrodite\", \"none\", NA)),      order = TRUE, nrow = c(81, 84), key = \"hair_color\", error = FALSE) #> Warning: `check_data()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::check_data()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: dplyr::starwars column names must include 'height', 'name', 'mass', #> 'hair_color' and 'gender' in that order #> Warning: column height of dplyr::starwars must not include missing values #> Warning: the values in column mass of dplyr::starwars must lie between 20 and #> 1358 #> Warning: column hair_color of dplyr::starwars can only include values 'black', #> 'blond' or 'brown' #> Warning: column gender of dplyr::starwars can only include values 'female', #> 'hermaphrodite', 'male' or 'none' #> Warning: dplyr::starwars must not have more than 84 rows #> Warning: column 'hair_color' in dplyr::starwars must be a unique key"},{"path":"https://poissonconsulting.github.io/checkr/index.html","id":"syntax","dir":"","previous_headings":"","what":"Syntax","title":"Check the Properties of Common R Objects","text":"checkr uses objects check values objects using elegant expressive syntax.","code":""},{"path":"https://poissonconsulting.github.io/checkr/index.html","id":"class","dir":"","previous_headings":"Syntax","what":"Class","title":"Check the Properties of Common R Objects","text":"check class simply pass object desired class.","code":"y <- c(2,1,0,1,NA) check_vector(y, values = numeric(0)) #> Warning: `check_vector()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_vector(), chk::check_dim(), chk::chk_unique(), #>   chk::chk_sorted(), chk::chk_named(), and/or chk::check_values() instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. check_vector(y, values = integer(0)) #> Error: y must be class integer"},{"path":"https://poissonconsulting.github.io/checkr/index.html","id":"missing-values","dir":"","previous_headings":"Syntax","what":"Missing Values","title":"Check the Properties of Common R Objects","text":"check vector include missing values pass single non-missing value (correct class). allow include missing values include missing value. check includes missing values pass missing value (correct class)","code":"check_vector(y, 1) #> Error: y must not include missing values check_vector(y, c(1, NA)) check_vector(y, NA_real_) #> Error: y must only include missing values"},{"path":"https://poissonconsulting.github.io/checkr/index.html","id":"range","dir":"","previous_headings":"Syntax","what":"Range","title":"Check the Properties of Common R Objects","text":"check range vector pass two non-missing values (well missing value required).","code":"check_vector(y, c(0, 2, NA)) check_vector(y, c(-1, -10, NA)) #> Error: the values in y must lie between -10 and -1"},{"path":"https://poissonconsulting.github.io/checkr/index.html","id":"specific-values","dir":"","previous_headings":"Syntax","what":"Specific Values","title":"Check the Properties of Common R Objects","text":"check vector includes specific values pass three non-missing values set  = TRUE.","code":"check_vector(y, c(0, 1, 2, NA)) check_vector(y, c(1, 1, 2, NA)) #> Error: y can only include values 1 or 2 check_vector(y, c(1, 2, NA), only = TRUE) #> Error: y can only include values 1 or 2"},{"path":"https://poissonconsulting.github.io/checkr/index.html","id":"naming-objects","dir":"","previous_headings":"","what":"Naming Objects","title":"Check the Properties of Common R Objects","text":"default, name object determined function call. simplifies things results less informative error messages used pipe. argument x_name can used override name.","code":"check_vector(list(x = 1)) #> Error: list(x = 1) must be an atomic vector library(magrittr) #>  #> Attaching package: 'magrittr' #> The following objects are masked from 'package:testthat': #>  #>     equals, is_less_than, not y %>% check_list() #> Warning: `check_list()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_list(), chk::check_dim(), chk::chk_unique(), #>   chk::chk_named(), and/or chk::check_values() instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Error: . must be a list y %>% check_list(x_name = \"y\") #> Error: y must be a list"},{"path":"https://poissonconsulting.github.io/checkr/index.html","id":"scalars","dir":"","previous_headings":"","what":"Scalars","title":"Check the Properties of Common R Objects","text":"four wrapper functions check_lgl(), check_int(), check_dbl() check_str() check whether object attribute-less non-missing scalar logical (flag), integer, double (number) character (string). really useful checking types arguments functions Additional scalar wrappers check_date() check_dttm() scalar Date POSIXct objects. Alternatively can roll using general check_scalar() function.","code":"fun <- function(x) { check_lgl(x)} fun(x = NA) #> Warning: `check_lgl()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_lgl()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Error: x must not include missing values fun(x = TRUE) fun(x = 1) #> Error: x must be class logical"},{"path":"https://poissonconsulting.github.io/checkr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Check the Properties of Common R Objects","text":"install latest development version r-universe. install latest development version GitHub","code":"install.packages(\"checkr\", repos = c(\"https://poissonconsulting.r-universe.dev\", \"https://cloud.r-project.org\")) # install.packages(\"pak\", repos = sprintf(\"https://r-lib.github.io/p/pak/stable/%s/%s/%s\", .Platform$pkgType, R.Version()$os, R.Version()$arch)) pak::pak(\"poissonconsulting/checkr\")"},{"path":"https://poissonconsulting.github.io/checkr/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Check the Properties of Common R Objects","text":"","code":"To cite checkr in publications use:    Joe Thorley (2018). checkr: An R package for Assertive Programming.   Journal of Open Source Software, 3(23), 624. URL   https://doi.org/10.21105/joss.00624  A BibTeX entry for LaTeX users is    @Article{,     title = {checkr: {An} {R} package for {Assertive} {Programming}},     author = {Joe Thorley},     journal = {Journal of Open Source Software},     year = {2018},     volume = {3},     number = {23},     pages = {624},     url = {http://joss.theoj.org/papers/10.21105/joss.00624},   }"},{"path":"https://poissonconsulting.github.io/checkr/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Check the Properties of Common R Objects","text":"Please report issues. Pull requests always welcome.","code":""},{"path":"https://poissonconsulting.github.io/checkr/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Check the Properties of Common R Objects","text":"Please note checkr project released Contributor Code Conduct. contributing project, agree abide terms","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Attributes — check_attributes","title":"Check Attributes — check_attributes","text":"Checks objects attributes.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Attributes — check_attributes","text":"","code":"check_attributes(   x,   values = NULL,   exclusive = FALSE,   order = FALSE,   names = TRUE,   class = TRUE,   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Attributes — check_attributes","text":"x object check. values NULL (default) character vector specifying column names named list specifying column names values. exclusive flag indicating whether elements permitted. order flag indicating whether elements occur order values. names flag specifying whether names considered attribute. class flag specifying whether class considered attribute. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Attributes — check_attributes","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Attributes — check_attributes","text":"","code":"x <- 1 attributes(x) <- list(y = 2L) check_attributes(x, values = list(y = 3:4), error = FALSE) #> Warning: `check_attributes()` was deprecated in checkr 0.5.1. #> ℹ Pull out attributes with `attributes()` and then use appropriate chk function #> Warning: the values in element y of attributes of x must lie between 3 and 4"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_character.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Character — check_character","title":"Check Character — check_character","text":"Checks x character vector attributes including names.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Character — check_character","text":"","code":"check_character(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Character — check_character","text":"x object check. coerce flag indicating whether coerce factor character vector drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Character — check_character","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Character — check_character","text":"","code":"check_character(\"1\", error = FALSE) #> Warning: `check_character()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_character()` instead. check_character(1:2, error = FALSE) #> Warning: 1:2 must be class character #> Warning: 1:2 must inherit from classes 'character' in that order"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Check String — check_chr","title":"Check String — check_chr","text":"Checks object string (non-missing character scalar attributes including names).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check String — check_chr","text":"","code":"check_chr(x, coerce = FALSE, x_name = substitute(x), error = TRUE)  check_string(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check String — check_chr","text":"x object check. coerce flag indicating whether coerce factor scalar string drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check String — check_chr","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check String — check_chr","text":"","code":"check_chr(1, error = FALSE) #> Warning: `check_chr()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_chr()` instead. #> Warning: 1 must be class character #> Warning: 1 must inherit from classes 'character' in that order check_chr(\"1\", error = FALSE) check_chr(c(\"1\", \"2\"), error = FALSE) #> Warning: c(\"1\", \"2\") must have 1 element"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Classes — check_classes","title":"Check Classes — check_classes","text":"Checks object inherits one classes.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Classes — check_classes","text":"","code":"check_classes(   x,   classes = character(0),   exclusive = FALSE,   order = FALSE,   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Classes — check_classes","text":"x object check. classes character vector classes x inherit . exclusive flag indicating whether classes permitted. order flag indicating whether object classes occur order classes. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Classes — check_classes","text":"invisible copy x (throw error).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_classes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Classes — check_classes","text":"classes object can returned using class() function.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_classes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Classes — check_classes","text":"","code":"check_classes(list()) #> Warning: `check_classes()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_is(), chk::chk_s3_class(), chk::chk_s4_class(), or #>   chk::check_values() instead. check_classes(list(), \"list\") check_classes(list(), \"numeric\", error = FALSE) #> Warning: list() must inherit from class numeric"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Colnames — check_colnames","title":"Check Colnames — check_colnames","text":"Checks column names data frame returned colnames() function. function can check order columns whether columns permitted.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Colnames — check_colnames","text":"","code":"check_colnames(   x,   colnames = character(0),   exclusive = FALSE,   order = FALSE,   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Colnames — check_colnames","text":"x data check. colnames character vector column names. exclusive flag indicating whether columns permitted. order flag indicating whether columns occur order colnames. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Colnames — check_colnames","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_colnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Colnames — check_colnames","text":"","code":"data <- data.frame(x = 1, y = 2, z = 0) check_colnames(data, c(\"y\", \"x\"), error = FALSE) #> Warning: `check_colnames()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::check_data()` instead. check_colnames(data, c(\"y\", \"x\"), exclusive = TRUE, error = FALSE) #> Warning: data column names must include and only include 'y' and 'x' check_colnames(data, c(\"y\", \"x\"), order = TRUE, error = FALSE) #> Warning: data column names must include 'y' and 'x' in that order check_colnames(data, c(\"a\"), error = FALSE) #> Warning: data column names must include 'a'"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Count — check_count","title":"Check Count — check_count","text":"Checks object count (non-negative integer coerce = TRUE non-negative numeric whole number).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Count — check_count","text":"","code":"check_count(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Count — check_count","text":"x object check. coerce flag indicating whether coerce non-negative numeric (dbl) whole number count drop attributes (including names). x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Count — check_count","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Count — check_count","text":"","code":"check_count(-1L, error = FALSE) #> Warning: `check_count()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_whole_number() and chk::chk_gte() instead. #> Warning: the values in -1L must lie between 0 and 2147483647 check_count(1L, error = FALSE) check_count(1, error = FALSE) #> Warning: 1 must be class integer #> Warning: 1 must inherit from classes 'integer' in that order check_count(1, coerce = TRUE, error = FALSE) check_count(1.01, coerce = TRUE, error = FALSE) #> Warning: 1.01 must be class integer #> Warning: 1.01 must inherit from classes 'integer' in that order"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Data — check_data","title":"Check Data — check_data","text":"Checks whether object data frame. Can also check number rows, names order values columns well whether particular columns form unique key.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Data — check_data","text":"","code":"check_data(   x,   values = NULL,   nrow = NA,   exclusive = FALSE,   order = FALSE,   key = character(0),   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Data — check_data","text":"x object check. values NULL (default) character vector specifying column names named list specifying column names values. nrow flag indicating whether x rows (versus rows) missing value indicating requirements count count range number rows. @return invisible copy x (throw error). exclusive flag indicating whether columns permitted. order flag indicating whether columns occur order values. key character vector columns represent unique key. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Data — check_data","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Data — check_data","text":"","code":"z <- data.frame(  Count = c(0L, 3L, 3L, 0L, NA),    Longitude = c(0, 0, 90, 90, 180),    Latitude = c(0, 90, 90.2, 100, -180),   Type = factor(c(\"Good\", \"Bad\", \"Bad\", \"Bad\", \"Bad\"), levels = c(\"Good\", \"Bad\")),   Extra = TRUE,   Comments = c(\"In Greenwich\", \"Somewhere else\", \"I'm lost\",      \"I didn't see any\", \"Help\"),    stringsAsFactors = FALSE)  check_data(z, values = list(   Count = 1,   Extra = NA,   Latitude = c(45, 90)   ), exclusive = TRUE, order = TRUE, nrow = 10L, key = \"Longitude\", error = FALSE) #> Warning: `check_data()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::check_data()` instead. #> Warning: z column names must be identical to 'Count', 'Extra' and 'Latitude' #> Warning: column Count of z must be class numeric #> Warning: column Count of z must inherit from classes 'numeric' in that order #> Warning: column Count of z must not include missing values #> Warning: column Extra of z must only include missing values #> Warning: the values in column Latitude of z must lie between 45 and 90 #> Warning: z must have 10 rows #> Warning: column 'Longitude' in z must be a unique key"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Date — check_date","title":"Check Date — check_date","text":"Checks x date (non-missing unnamed Date scalar).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Date — check_date","text":"","code":"check_date(x, coerce = FALSE, x_name = substitute(x), error = TRUE)  check_day(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Date — check_date","text":"x object check. coerce flag indicating whether coerce date time (POSIXt scalar) Date remove names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Date — check_date","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Date — check_date","text":"","code":"check_date(Sys.Date(), error = FALSE) #> Warning: `check_date()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_date()` instead. check_date(Sys.time(), error = FALSE) #> Warning: Sys.time() must be class Date #> Warning: Sys.time() must inherit from classes 'Date' in that order check_date(Sys.time(), coerce = TRUE, error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_dbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Dbl — check_dbl","title":"Check Dbl — check_dbl","text":"Checks x dbl (non-missing numeric scalar attributes including names).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_dbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Dbl — check_dbl","text":"","code":"check_dbl(x, coerce = FALSE, x_name = substitute(x), error = TRUE)  check_number(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_dbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Dbl — check_dbl","text":"x object check. coerce flag indicating whether coerce scalar integer dbl drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_dbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Dbl — check_dbl","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_dbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Dbl — check_dbl","text":"","code":"check_dbl(1, error = FALSE) #> Warning: `check_dbl()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_dbl()` instead. check_dbl(1L, error = FALSE) #> Warning: 1L must be class numeric #> Warning: 1L must inherit from classes 'numeric' in that order check_dbl(c(1,2), error = FALSE) #> Warning: c(1, 2) must have 1 element"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_dttm.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Date Time — check_dttm","title":"Check Date Time — check_dttm","text":"Checks x datetime (non-missing unnamed POSIXct scalar).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_dttm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Date Time — check_dttm","text":"","code":"check_dttm(   x,   coerce = FALSE,   tzone = \"UTC\",   x_name = substitute(x),   error = TRUE )  check_datetime(   x,   coerce = FALSE,   tzone = \"\",   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_dttm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Date Time — check_dttm","text":"x object check. coerce flag indicating whether coerce date dttm (using time zone tzone) remove names. tzone string time zone \"\" current time zone. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_dttm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Date Time — check_dttm","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_dttm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Date Time — check_dttm","text":"","code":"check_dttm(Sys.Date(), error = FALSE) #> Warning: `check_dttm()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_date_time() and chk::chk_tz() instead. #> Warning: Sys.Date() must be class POSIXct #> Warning: Sys.Date() must be class POSIXt #> Warning: Sys.Date() must inherit from classes 'POSIXct' and 'POSIXt' in that order #> Warning: x time zone must be 'UTC' (not 'NULL') check_dttm(Sys.time(), error = FALSE) #> Warning: x time zone must be 'UTC' (not 'NULL')"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Environment — check_environment","title":"Check Environment — check_environment","text":"Checks x environment.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Environment — check_environment","text":"","code":"check_environment(x, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_environment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Environment — check_environment","text":"x object check. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_environment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Environment — check_environment","text":"invisible copy x (throw error).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_environment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Environment — check_environment","text":"","code":"check_environment(1, error = FALSE) #> Warning: `check_environment()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_environment()` instead. #> Warning: 1 must be an environment check_environment(.GlobalEnv, error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_flag_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Flag or NA — check_flag_na","title":"Check Flag or NA — check_flag_na","text":"Checks x flag NA (missing logical scalar).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_flag_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Flag or NA — check_flag_na","text":"","code":"check_flag_na(x, coerce = TRUE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_flag_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Flag or NA — check_flag_na","text":"x object check. coerce flag indicating whether drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_flag_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Flag or NA — check_flag_na","text":"invisible copy x (throw error).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_flag_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Flag or NA — check_flag_na","text":"Useful using flag pass one three options.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Function — check_function","title":"Check Function — check_function","text":"Checks x function.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Function — check_function","text":"","code":"check_function(x, nargs = NA, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Function — check_function","text":"x object check. nargs count number arguments count range minimum maximum number arguments. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Function — check_function","text":"invisible copy x (throw error).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Function — check_function","text":"","code":"check_function(character, error = FALSE) #> Warning: `check_function()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_function()` instead. check_function(character, nargs = 0L, error = FALSE) #> Warning: character must have 0 arguments"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_grepl.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Matches Regular Expression — check_grepl","title":"Check Matches Regular Expression — check_grepl","text":"Checks whether elements object match regular expression.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_grepl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Matches Regular Expression — check_grepl","text":"","code":"check_grepl(   x,   pattern = \".*\",   regex = pattern,   x_name = substitute(x),   error = TRUE )  check_regex(x, regex = \".*\", x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_grepl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Matches Regular Expression — check_grepl","text":"x object check. pattern string regular expression. regex string regular expression (deprecated pattern). x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_grepl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Matches Regular Expression — check_grepl","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_grepl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Matches Regular Expression — check_grepl","text":"","code":"check_grepl(\"foo\", \"fo\") check_grepl(\"foo\", \"fo$\", error = FALSE) #> Warning: foo must match regular expression 'fo$'"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_homogenous.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Homogenous — check_homogenous","title":"Check Homogenous — check_homogenous","text":"Checks whether elements x class. works vectors, matrices arrays , definition always homogenous lists data frames may may homogenous.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_homogenous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Homogenous — check_homogenous","text":"","code":"check_homogenous(   x,   strict = FALSE,   recursive = FALSE,   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_homogenous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Homogenous — check_homogenous","text":"x object check. strict flag indicating whether objects must identical classes just share one classes. recursive flag indicating whether check applied recursively. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_homogenous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Homogenous — check_homogenous","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_homogenous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Homogenous — check_homogenous","text":"","code":"check_homogenous(1:2) #> Warning: `check_homogenous()` was deprecated in checkr 0.5.1. check_homogenous(list(1,2)) check_homogenous(list(1,TRUE), error = FALSE) #> Warning: all elements in list(1, TRUE) must inherit from the same class"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_inherits.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Inherits — check_inherits","title":"Check Inherits — check_inherits","text":"Checks object inherits class.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_inherits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Inherits — check_inherits","text":"","code":"check_inherits(x, class, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_inherits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Inherits — check_inherits","text":"x object check. class string class x inherit . x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_inherits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Inherits — check_inherits","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_inherits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Inherits — check_inherits","text":"","code":"check_inherits(list(), \"list\") #> Warning: `check_inherits()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_is()` instead. check_inherits(list(), \"numeric\", error = FALSE) #> Warning: list() must inherit from class numeric"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Int — check_int","title":"Check Int — check_int","text":"Checks x int (non-missing integer scalar attributes including names).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Int — check_int","text":"","code":"check_int(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Int — check_int","text":"x object check. coerce flag indicating whether coerce numeric (dbl) whole number int drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Int — check_int","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Int — check_int","text":"","code":"check_int(1, error = FALSE) #> Warning: `check_int()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_integer()` instead. #> Warning: 1 must be class integer #> Warning: 1 must inherit from classes 'integer' in that order check_int(1L, error = FALSE) check_int(1:2, error = FALSE) #> Warning: 1:2 must have 1 element"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Integer — check_integer","title":"Check Integer — check_integer","text":"Checks x integer vector attributes including names.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Integer — check_integer","text":"","code":"check_integer(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Integer — check_integer","text":"x object check. coerce flag indicating whether coerce numeric (dbl) whole number vector integer vector drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Integer — check_integer","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Integer — check_integer","text":"","code":"check_integer(1, error = FALSE) #> Warning: `check_integer()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_integer()` instead. #> Warning: 1 must be class integer #> Warning: 1 must inherit from classes 'integer' in that order check_integer(1L, error = FALSE) check_integer(1:2, error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_intersection.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Atomic Vector Intersection — check_intersection","title":"Check Atomic Vector Intersection — check_intersection","text":"Checks elements atomic vector x intersect atomic vector y.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_intersection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Atomic Vector Intersection — check_intersection","text":"","code":"check_intersection(   x,   y,   all_y = FALSE,   x_name = substitute(x),   y_name = substitute(y),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_intersection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Atomic Vector Intersection — check_intersection","text":"x object check. y second atomic vector. all_y flag indicating whether elements y match x. x_name string name object x. y_name string name object y. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_intersection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Atomic Vector Intersection — check_intersection","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_intersection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Atomic Vector Intersection — check_intersection","text":"","code":"x1 <- 1:3 x2 <- 1:4 check_intersection(x1, x2) #> Warning: `check_intersection()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_join()` instead. check_intersection(x2, x1, error = FALSE) #> Warning: x1 must include all the elements in x2"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Join — check_join","title":"Check Join — check_join","text":"Checks columns data frame x form many--one join corresponding columns y, ie, join unique key y rows x match y.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Join — check_join","text":"","code":"check_join(   x,   y,   by = NULL,   all_y = FALSE,   x_name = substitute(x),   y_name = substitute(y),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Join — check_join","text":"x object check. y parent data frame. character vector named character vector columns join . all_y flag indicating whether rows y match x. x_name string name object x. y_name string name object y. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Join — check_join","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Join — check_join","text":"","code":"data1 <- data.frame(x = 1:2) data2 <- data.frame(x = 3:5, y = 2L) check_join(data1, data2, error = FALSE) #> Warning: `check_join()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_join()` instead. #> Warning: join between data1 and data2 must include all the rows in data1 check_join(data1, data2, by = c(x = \"y\"), error = FALSE) #> Warning: column 'y' in data2 must be a unique key #> Warning: join between data1 and data2 must include all the rows in data1"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Key — check_key","title":"Check Key — check_key","text":"Checks columns data frame represent unique key. default columns checked.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Key — check_key","text":"","code":"check_key(   x,   key = names(x),   na_distinct = FALSE,   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Key — check_key","text":"x data check. key character vector column names representing key. na_distinct flag specifying whether missing values considered distinct. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Key — check_key","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Key — check_key","text":"","code":"data <- data.frame(x = 1:1, y = 1:2) check_key(data, \"x\", error = FALSE) #> Warning: `check_key()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::check_key()` instead. #> Warning: column 'x' in data must be a unique key check_key(data, c(\"y\", \"x\"), error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Length — check_length","title":"Check Length — check_length","text":"Checks whether number elements object exact number, within range 0 vs positive.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Length — check_length","text":"","code":"check_length(x, length = TRUE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Length — check_length","text":"x object check. length flag indicating whether x elements (versus elements) missing value indicating requirements count count range number elements count vector permitted number elements. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Length — check_length","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Length — check_length","text":"","code":"check_length(2) #> Warning: `check_length()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::check_dim()` instead. check_length(character(0), length = 0) check_length(NULL, error = FALSE) #> Warning: NULL must have at least 1 element check_length(list(), error = FALSE) #> Warning: list() must have at least 1 element"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_length1.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Length One — check_length1","title":"Check Length One — check_length1","text":"Checks whether x object length 1.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_length1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Length One — check_length1","text":"","code":"check_length1(x, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_length1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Length One — check_length1","text":"x object check. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_length1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Length One — check_length1","text":"invisible copy x (throw error).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_length1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Length One — check_length1","text":"","code":"check_length1(2) #> Warning: `check_length1()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::check_dim()` instead. check_length1(1:2, error = FALSE) #> Warning: 1:2 must have 1 element check_length1(NULL, error = FALSE) #> Warning: NULL must have 1 element check_length1(list(), error = FALSE) #> Warning: list() must have 1 element"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Levels — check_levels","title":"Check Levels — check_levels","text":"Checks levels factor including order whether levels permitted.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Levels — check_levels","text":"","code":"check_levels(   x,   levels,   exclusive = TRUE,   order = TRUE,   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Levels — check_levels","text":"x object check. levels character vector levels. exclusive flag indicating whether levels permitted. order flag indicating whether object levels occur order names. check whether x ordered factor use check_vector(x, ordered(1)). x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Levels — check_levels","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Levels — check_levels","text":"","code":"check_levels(1, c(\"x\", \"y\"), error = FALSE) #> Warning: `check_levels()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::check_data()` instead. #> Warning: 1 must have a levels attribute #> Warning: 1 levels must be identical to 'x' and 'y' check_levels(factor(1), c(\"x\", \"y\"), error = FALSE) #> Warning: factor(1) levels must be identical to 'x' and 'y'"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_lgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Flag — check_lgl","title":"Check Flag — check_lgl","text":"Checks x flag (non-missing logical scalar attributes including names).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_lgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Flag — check_lgl","text":"","code":"check_lgl(x, coerce = FALSE, x_name = substitute(x), error = TRUE)  check_flag(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_lgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Flag — check_lgl","text":"x object check. coerce flag indicating whether drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_lgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Flag — check_lgl","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_lgl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Flag — check_lgl","text":"","code":"check_lgl(1, error = FALSE) #> Warning: `check_lgl()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_lgl()` instead. #> Warning: 1 must be class logical #> Warning: 1 must inherit from classes 'logical' in that order check_lgl(FALSE, error = FALSE) check_lgl(c(FALSE, TRUE), error = FALSE) #> Warning: c(FALSE, TRUE) must have 1 element"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Check List — check_list","title":"Check List — check_list","text":"Checks whether object list optionally names values elements.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check List — check_list","text":"","code":"check_list(   x,   values = NULL,   length = NA,   unique = FALSE,   named = NA,   exclusive = FALSE,   order = FALSE,   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check List — check_list","text":"x object check. values NULL (default) character vector specifying column names named list specifying column names values. length flag indicating whether x elements (versus elements) missing value indicating requirements count count range number elements count vector permitted number elements. unique flag indicating whether values must unique. named flag indicating whether list must named unnamed regular expression must match names count count range number characters names NA matter list named. exclusive flag indicating whether elements permitted. order flag indicating whether elements occur order values. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check List — check_list","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check List — check_list","text":"","code":"check_list(list()) #> Warning: `check_list()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_list(), chk::check_dim(), chk::chk_unique(), #>   chk::chk_named(), and/or chk::check_values() instead. check_list(list(x1 = 2, x2 = 1:2), values = list(x1 = 1, x2 = 1L))"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Logical — check_logical","title":"Check Logical — check_logical","text":"Checks x logical vector attributes including names.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Logical — check_logical","text":"","code":"check_logical(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Logical — check_logical","text":"x object check. coerce flag indicating whether drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Logical — check_logical","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_logical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Logical — check_logical","text":"","code":"check_logical(1, error = FALSE) #> Warning: `check_logical()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_logical()` instead. #> Warning: 1 must be class logical #> Warning: 1 must inherit from classes 'logical' in that order check_logical(FALSE, error = FALSE) check_logical(c(FALSE, TRUE), error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_missing_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Missing Colnames — check_missing_colnames","title":"Check Missing Colnames — check_missing_colnames","text":"Checks whether specific colnames missing data frame.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_missing_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Missing Colnames — check_missing_colnames","text":"","code":"check_missing_colnames(x, colnames, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_missing_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Missing Colnames — check_missing_colnames","text":"x data check. colnames character vector column names must missing x. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_missing_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Missing Colnames — check_missing_colnames","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_missing_colnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Missing Colnames — check_missing_colnames","text":"","code":"data <- data.frame(x = 1, y = 2, z = 0) check_missing_colnames(data, c(\"y\", \"x\", \"a\"), error = FALSE) #> Warning: `check_missing_colnames()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_not_subset(names()) instead. #> Warning: data must not have columns 'x' and 'y' check_missing_colnames(data, \"a\", error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_missing_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Missing Names — check_missing_names","title":"Check Missing Names — check_missing_names","text":"Checks whether specific names missing object.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_missing_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Missing Names — check_missing_names","text":"","code":"check_missing_names(x, names, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_missing_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Missing Names — check_missing_names","text":"x named object check. names character vector names must missing x. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_missing_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Missing Names — check_missing_names","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_missing_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Missing Names — check_missing_names","text":"","code":"vec <- c(x = 1, y = 2, z = 0) check_missing_names(vec, c(\"y\", \"x\", \"a\"), error = FALSE) #> Warning: `check_missing_names()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_not_subset(names()) instead. #> Warning: vec must not have names 'y' and 'x' check_missing_names(vec, \"a\", error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Name — check_name","title":"Check Name — check_name","text":"Checks whether element character vector syntactically valid name.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Name — check_name","text":"","code":"check_name(x, x_name = substitute(x), coerce = FALSE, error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Name — check_name","text":"x object check. x_name string name object x. coerce flag specifying whether coerce factor character vector drop attributes including names. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Name — check_name","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Name — check_name","text":"","code":"vec <- c(\"x\", \"x.y\", \"x y\") check_name(vec, error = FALSE) #> Warning: `check_name()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::check_names()` instead. #> Warning: the following 1 value of vec is invalid: 'x y'"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_named.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Named — check_named","title":"Check Named — check_named","text":"Checks whether object named.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_named.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Named — check_named","text":"","code":"check_named(   x,   nchar = c(0L, chk_max_int()),   pattern = \".*\",   regex = pattern,   unique = FALSE,   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_named.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Named — check_named","text":"x object check. nchar count count range number characters. pattern string regular expression must match names. regex string regular expression must match names. unique flag indicating whether names must unique. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_named.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Named — check_named","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_named.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Named — check_named","text":"","code":"check_named(2, error = FALSE) #> Warning: 2 must be named x <- 1 names(x) <- \"y\" check_named(x, error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Names — check_names","title":"Check Names — check_names","text":"Checks names object returned names() function. function can check order names whether names permitted.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Names — check_names","text":"","code":"check_names(   x,   names = character(0),   exclusive = FALSE,   order = FALSE,   unique = FALSE,   complete = TRUE,   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Names — check_names","text":"x object check. names character vector names. exclusive flag indicating whether names permitted. order flag indicating whether object names occur order names. unique flag indicating whether object names unique. complete flag indicating whether possible names represented. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Names — check_names","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Names — check_names","text":"","code":"vec <- c(x = 1, y = 2, z = 0) check_names(vec, c(\"y\", \"x\"), error = FALSE) #> Warning: `check_names()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::check_names()` instead. check_names(vec, c(\"y\", \"x\"), exclusive = TRUE, error = FALSE) #> Warning: vec names must not include 'z' check_names(vec, c(\"y\", \"x\"), order = TRUE, error = FALSE) #> Warning: vec names must include 'y' and 'x' in that order check_names(vec, c(\"a\"), error = FALSE) #> Warning: vec names must include 'a'"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nchar.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Number of Characters — check_nchar","title":"Check Number of Characters — check_nchar","text":"Checks number characters elements object.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nchar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Number of Characters — check_nchar","text":"","code":"check_nchar(x, nchar = TRUE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nchar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Number of Characters — check_nchar","text":"x object check. nchar flag indicating whether x characters missing value indicating requirements count count range number characters. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nchar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Number of Characters — check_nchar","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nchar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Number of Characters — check_nchar","text":"","code":"check_nchar(c(\"foo\", \"bar\"), nchar = 3) #> Warning: `check_nchar()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_equal(), chk::chk_range(), chk::chk_subset() etc with #>   nchar() instead."},{"path":"https://poissonconsulting.github.io/checkr/reference/check_ncol.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Number of Columns — check_ncol","title":"Check Number of Columns — check_ncol","text":"Checks number columns data frame.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_ncol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Number of Columns — check_ncol","text":"","code":"check_ncol(x, ncol = TRUE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_ncol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Number of Columns — check_ncol","text":"x object check. ncol flag indicating whether x columns (versus columns) missing value indicating requirements count count range number columns. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_ncol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Number of Columns — check_ncol","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_ncol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Number of Columns — check_ncol","text":"","code":"check_ncol(data.frame(x = 1), error = FALSE) #> Warning: `check_ncol()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::check_dim()` instead. check_ncol(data.frame(x = 1:2), ncol = 1, error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_neg_dbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Negative Dbl — check_neg_dbl","title":"Check Negative Dbl — check_neg_dbl","text":"Checks x negative dbl (non-missing numeric scalar attributes including names).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_neg_dbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Negative Dbl — check_neg_dbl","text":"","code":"check_neg_dbl(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_neg_dbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Negative Dbl — check_neg_dbl","text":"x object check. coerce flag indicating whether coerce scalar integer dbl drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_neg_dbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Negative Dbl — check_neg_dbl","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_neg_dbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Negative Dbl — check_neg_dbl","text":"","code":"check_neg_dbl(1, error = FALSE) #> Warning: `check_neg_dbl()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_dbl() and chk::chk_lt() instead. #> Warning: 1 must be negative check_neg_dbl(0L, error = FALSE) #> Warning: 0L must be class numeric #> Warning: 0L must inherit from classes 'numeric' in that order #> Warning: 0L must be negative check_neg_dbl(0, error = FALSE) #> Warning: 0 must be negative"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_neg_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Negative Int — check_neg_int","title":"Check Negative Int — check_neg_int","text":"Checks x negative int (non-missing integer scalar attributes including names).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_neg_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Negative Int — check_neg_int","text":"","code":"check_neg_int(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_neg_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Negative Int — check_neg_int","text":"x object check. coerce flag indicating whether coerce numeric (dbl) whole number int drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_neg_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Negative Int — check_neg_int","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_neg_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Negative Int — check_neg_int","text":"","code":"check_neg_int(0L, error = FALSE) #> Warning: `check_neg_int()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_integer() and chk::chk_lt() instead. #> Warning: the values in 0L must lie between -2147483647 and -1 check_neg_int(-1L, error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nlevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Check nlevels — check_nlevels","title":"Check nlevels — check_nlevels","text":"Checks number levels object.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nlevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check nlevels — check_nlevels","text":"","code":"check_nlevels(x, nlevels = TRUE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nlevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check nlevels — check_nlevels","text":"x data check. nlevels flag indicating whether x elements (versus elements) missing value indicating requirements count count range number elements. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nlevels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check nlevels — check_nlevels","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nlevels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check nlevels — check_nlevels","text":"","code":"check_nlevels(factor(1), error = FALSE) #> Warning: `check_nlevels()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::check_dim()` instead. check_nlevels(factor(1), nlevels = 2, error = FALSE) #> Warning: factor(1) must have 2 levels"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_no_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Check No Attributes — check_no_attributes","title":"Check No Attributes — check_no_attributes","text":"Checks object attributes.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_no_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check No Attributes — check_no_attributes","text":"","code":"check_no_attributes(   x,   names = TRUE,   class = TRUE,   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_no_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check No Attributes — check_no_attributes","text":"x object check. names flag specifying whether names considered attribute. class flag specifying whether class considered attribute. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_no_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check No Attributes — check_no_attributes","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_no_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check No Attributes — check_no_attributes","text":"","code":"x <- 1 attributes(x) <- list(y = 2L) check_no_attributes(x, error = FALSE) #> Warning: `check_no_attributes()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_null(attributes()) instead #> Warning: x must not have attributes"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_noneg_dbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Non-Negative Dbl — check_noneg_dbl","title":"Check Non-Negative Dbl — check_noneg_dbl","text":"Checks x non-negative dbl (non-missing numeric scalar attributes including names).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_noneg_dbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Non-Negative Dbl — check_noneg_dbl","text":"","code":"check_noneg_dbl(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_noneg_dbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Non-Negative Dbl — check_noneg_dbl","text":"x object check. coerce flag indicating whether coerce scalar integer dbl drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_noneg_dbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Non-Negative Dbl — check_noneg_dbl","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_noneg_dbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Non-Negative Dbl — check_noneg_dbl","text":"","code":"check_noneg_dbl(1, error = FALSE) #> Warning: `check_noneg_dbl()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_dbl() and chk::chk_gte() instead. check_noneg_dbl(0L, error = FALSE) #> Warning: 0L must be class numeric #> Warning: 0L must inherit from classes 'numeric' in that order check_noneg_dbl(0, error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_noneg_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Non-Negative Int — check_noneg_int","title":"Check Non-Negative Int — check_noneg_int","text":"Checks x count (non-missing non-negative integer scalar attributes including names).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_noneg_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Non-Negative Int — check_noneg_int","text":"","code":"check_noneg_int(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_noneg_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Non-Negative Int — check_noneg_int","text":"x object check. coerce flag indicating whether coerce non-negative numeric (dbl) whole number count drop attributes (including names). x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_noneg_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Non-Negative Int — check_noneg_int","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_noneg_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Non-Negative Int — check_noneg_int","text":"","code":"check_noneg_int(1, error = FALSE) #> Warning: `check_noneg_int()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_integer() and chk::chk_gte() instead. #> Warning: 1 must be class integer #> Warning: 1 must inherit from classes 'integer' in that order check_noneg_int(0L, error = FALSE) check_noneg_int(1L, error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Number of Rows — check_nrow","title":"Check Number of Rows — check_nrow","text":"Checks number rows data frame.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Number of Rows — check_nrow","text":"","code":"check_nrow(x, nrow = TRUE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Number of Rows — check_nrow","text":"x object check. nrow flag indicating whether x rows (versus rows) missing value indicating requirements count count range number rows. @return invisible copy x (throw error). x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_nrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Number of Rows — check_nrow","text":"","code":"check_nrow(data.frame(x = 1), error = FALSE) #> Warning: `check_nrow()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::check_data()` instead. check_nrow(data.frame(x = integer(0)), error = FALSE) #> Warning: data.frame(x = integer(0)) must have at least 1 row check_nrow(data.frame(x = 1:2), nrow = 1, error = FALSE) #> Warning: data.frame(x = 1:2) must have 1 row"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Check NULL — check_null","title":"Check NULL — check_null","text":"Checks whether object NULL.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check NULL — check_null","text":"","code":"check_null(x, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check NULL — check_null","text":"x object check. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check NULL — check_null","text":"invisible copy x (throw error).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_null.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check NULL — check_null","text":"","code":"check_null(1, error = FALSE) #> Warning: `check_null()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_null()` instead. #> Warning: 1 must be NULL check_null(NULL, error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Numeric — check_numeric","title":"Check Numeric — check_numeric","text":"Checks x numeric (double) vector attributes including names.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Numeric — check_numeric","text":"","code":"check_numeric(x, coerce = FALSE, x_name = substitute(x), error = TRUE)  check_double(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Numeric — check_numeric","text":"x object check. coerce flag indicating whether coerce integer vector double vector drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Numeric — check_numeric","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Numeric — check_numeric","text":"","code":"check_numeric(1, error = FALSE) #> Warning: `check_numeric()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_numeric()` instead. check_numeric(1L, error = FALSE) #> Warning: 1L must be class numeric #> Warning: 1L must inherit from classes 'numeric' in that order check_numeric(1:2, error = FALSE) #> Warning: 1:2 must be class numeric #> Warning: 1:2 must inherit from classes 'numeric' in that order"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Pattern — check_pattern","title":"Check Pattern — check_pattern","text":"Checks whether elements x match pattern using grepl().","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Pattern — check_pattern","text":"","code":"check_pattern(x, pattern, all = TRUE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Pattern — check_pattern","text":"x object check. pattern string regular expression. flag indicating whether element must match pattern. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Pattern — check_pattern","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pos_dbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Positive Dbl — check_pos_dbl","title":"Check Positive Dbl — check_pos_dbl","text":"Checks x positive dbl (non-missing numeric scalar attributes including names).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pos_dbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Positive Dbl — check_pos_dbl","text":"","code":"check_pos_dbl(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pos_dbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Positive Dbl — check_pos_dbl","text":"x object check. coerce flag indicating whether coerce scalar integer dbl drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pos_dbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Positive Dbl — check_pos_dbl","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pos_dbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Positive Dbl — check_pos_dbl","text":"","code":"check_pos_dbl(1, error = FALSE) #> Warning: `check_pos_dbl()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_dbl() and chk::chk_gt() instead. check_pos_dbl(0L, error = FALSE) #> Warning: 0L must be class numeric #> Warning: 0L must inherit from classes 'numeric' in that order #> Warning: 0L must be positive check_pos_dbl(0, error = FALSE) #> Warning: 0 must be positive"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pos_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Positive Int — check_pos_int","title":"Check Positive Int — check_pos_int","text":"Checks x positive int (non-missing integer scalar attributes including names).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pos_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Positive Int — check_pos_int","text":"","code":"check_pos_int(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pos_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Positive Int — check_pos_int","text":"x object check. coerce flag indicating whether coerce numeric (dbl) whole number int drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pos_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Positive Int — check_pos_int","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_pos_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Positive Int — check_pos_int","text":"","code":"check_pos_int(0, error = FALSE) #> Warning: `check_pos_int()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_integer() and chk::chk_gt() instead. #> Warning: 0 must be class integer #> Warning: 0 must inherit from classes 'integer' in that order #> Warning: the values in 0 must lie between 1 and 2147483647 check_pos_int(1L, error = FALSE) check_pos_int(1:2, error = FALSE) #> Warning: 1:2 must have 1 element"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Probability — check_prob","title":"Check Probability — check_prob","text":"Checks x probability (non-missing dbl 0 1 inclusive attributes including names).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Probability — check_prob","text":"","code":"check_prob(x, coerce = FALSE, x_name = substitute(x), error = TRUE)  check_probability(x, coerce = FALSE, x_name = substitute(x), error = TRUE)  check_prop(x, coerce = FALSE, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Probability — check_prob","text":"x object check. coerce flag indicating whether coerce integer dbl drop attributes including names. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Probability — check_prob","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_prob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Probability — check_prob","text":"","code":"check_prob(1, error = FALSE) #> Warning: `check_prob()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_dbl() and chk::chk_range() instead. check_prob(1.1, error = FALSE) #> Warning: the values in 1.1 must lie between 0 and 1 check_prob(c(0, 1), error = FALSE) #> Warning: c(0, 1) must have 1 element"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_props.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Proportions — check_props","title":"Check Proportions — check_props","text":"Checks x proportions vector - non-missing dbls 0 1 sum 1.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_props.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Proportions — check_props","text":"","code":"check_props(x, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_props.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Proportions — check_props","text":"x object check. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_props.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Proportions — check_props","text":"invisible copy x (throw error).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_rbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Row Bind — check_rbind","title":"Check Row Bind — check_rbind","text":"Checks whether data frame columns classes second data frame means can rbind()ed without problem.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_rbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Row Bind — check_rbind","text":"","code":"check_rbind(   x,   y,   exclusive = TRUE,   order = FALSE,   x_name = substitute(x),   y_name = substitute(y),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_rbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Row Bind — check_rbind","text":"x first data frame. y second data frame. exclusive flag indicating whether columns permitted. order flag indicating whether columns occur order. x_name string name object x. y_name string name object y. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_rbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Row Bind — check_rbind","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_rbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Row Bind — check_rbind","text":"","code":"check_rbind(datasets::mtcars, datasets::mtcars) #> Warning: `check_rbind()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::check_data()` instead."},{"path":"https://poissonconsulting.github.io/checkr/reference/check_scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Scalar — check_scalar","title":"Check Scalar — check_scalar","text":"Checks whether object atomic vector one element.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_scalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Scalar — check_scalar","text":"","code":"check_scalar(   x,   values = NULL,   named = FALSE,   attributes = named,   only = FALSE,   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Scalar — check_scalar","text":"x object check. values NULL vector specifying values. named flag indicating whether scalar must named unnamed NA matter scalar named. attributes flag indicating whether scalar must must attributes NA matter scalar named. flag indicating whether actual values permitted. affects values two less non-missing elements. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_scalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Scalar — check_scalar","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_scalar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Scalar — check_scalar","text":"","code":"check_scalar(1) #> Warning: `check_scalar()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_scalar()` instead. check_scalar(c(1,2), error = FALSE) #> Warning: c(1, 2) must have 1 element check_scalar(1, c(2,3), error = FALSE) #> Warning: the values in 1 must lie between 2 and 3"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_sorted.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Sorted — check_sorted","title":"Check Sorted — check_sorted","text":"Checks whether object x sorted using !.unsorted(x, na.rm = TRUE).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_sorted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Sorted — check_sorted","text":"","code":"check_sorted(x, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_sorted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Sorted — check_sorted","text":"x object check. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_sorted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Sorted — check_sorted","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_sorted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Sorted — check_sorted","text":"","code":"check_sorted(1:2, error = FALSE) #> Warning: `check_sorted()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_sorted()` instead. check_sorted(2:1, error = FALSE) #> Warning: 2:1 must be sorted"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_tzone.html","id":null,"dir":"Reference","previous_headings":"","what":"Check TimeZone — check_tzone","title":"Check TimeZone — check_tzone","text":"Checks objects tzone attribute.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_tzone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check TimeZone — check_tzone","text":"","code":"check_tzone(x, tzone = \"UTC\", x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_tzone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check TimeZone — check_tzone","text":"x object check. tzone string time zone. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_tzone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check TimeZone — check_tzone","text":"invisible copy x (throw error).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_tzone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check TimeZone — check_tzone","text":"","code":"check_tzone(Sys.Date(), error = FALSE) #> Warning: `check_tzone()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_tz()` instead. #> Warning: Sys.Date() time zone must be 'UTC' (not 'NULL') x <- as.POSIXct(\"2000-01-02 03:04:55\", tz = \"Etc/GMT+8\") check_tzone(x, tzone = \"PST8PDT\", error = FALSE) #> Warning: x time zone must be 'PST8PDT' (not 'Etc/GMT+8')"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Unique — check_unique","title":"Check Unique — check_unique","text":"Checks whether elements object unique.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Unique — check_unique","text":"","code":"check_unique(x, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Unique — check_unique","text":"x object check. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Unique — check_unique","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Unique — check_unique","text":"","code":"check_unique(2, error = FALSE) #> Warning: `check_unique()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_unique()` instead. check_unique(c(2,2), error = FALSE) #> Warning: c(2, 2) must be unique check_unique(1:2, error = FALSE) check_unique(character(0), error = FALSE) check_unique(NULL, error = FALSE) check_unique(list(), error = FALSE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unnamed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Unnamed — check_unnamed","title":"Check Unnamed — check_unnamed","text":"Checks whether objects unnamed.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unnamed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Unnamed — check_unnamed","text":"","code":"check_unnamed(x, x_name = substitute(x), error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unnamed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Unnamed — check_unnamed","text":"x object check. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unnamed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Unnamed — check_unnamed","text":"invisible copy x (throw error).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unnamed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Unnamed — check_unnamed","text":"","code":"check_unnamed(2, error = FALSE) #> Warning: `check_unnamed()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_null_or()` instead. x <- 1 names(x) <- \"y\" check_unnamed(x, error = FALSE) #> Warning: x must be unnamed"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unused.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Unused — check_unused","title":"Check Unused — check_unused","text":"Checks whether ... unused. can used functions.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unused.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Unused — check_unused","text":"","code":"check_unused(..., x_name = \"...\", error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unused.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Unused — check_unused","text":"... arguments check. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unused.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Unused — check_unused","text":"invisible copy x (throw error).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_unused.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Unused — check_unused","text":"","code":"fun <- function(...) check_unused(..., error = FALSE) fun() #> Warning: `check_unused()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chk_unused()` instead. fun(1) #> Warning: ... must be unused"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Atomic Vector — check_vector","title":"Check Atomic Vector — check_vector","text":"Check Atomic Vector","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Atomic Vector — check_vector","text":"","code":"check_vector(   x,   values = NULL,   length = NA,   unique = FALSE,   sorted = FALSE,   named = NA,   attributes = named,   names = TRUE,   class = TRUE,   only = FALSE,   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/checkr/reference/check_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Atomic Vector — check_vector","text":"x object check. values NULL vector specifying values. length flag indicating whether x elements (versus elements) missing value indicating requirements count count range number elements count vector permitted number elements. unique flag indicating whether values must unique. sorted flag indicating whether vector must sorted. named flag indicating whether vector must named unnamed NA matter. attributes flag indicating whether vector must must attributes NA matter. names flag specifying whether names considered attribute. class flag specifying whether class considered attribute. flag indicating whether actual values permitted. affects values two less non-missing elements. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Atomic Vector — check_vector","text":"invisible copy x (throw error).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/check_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Atomic Vector — check_vector","text":"","code":"check_vector(2:1, length = 3, sorted = TRUE, named = TRUE, error = FALSE) #> Warning: `check_vector()` was deprecated in checkr 0.5.1. #> ℹ Please use chk::chk_vector(), chk::check_dim(), chk::chk_unique(), #>   chk::chk_sorted(), chk::chk_named(), and/or chk::check_values() instead. #> Warning: 2:1 must have 3 elements #> Warning: 2:1 must be sorted #> Warning: 2:1 must be named #> Warning: 2:1 must have attributes check_vector(c(\"one\", \"two\", \"four\"), values = c(\"one\", \"two\", \"two\"), error = FALSE) #> Warning: c(\"one\", \"two\", \"four\") can only include values 'one' or 'two'"},{"path":"https://poissonconsulting.github.io/checkr/reference/checkor.html","id":null,"dir":"Reference","previous_headings":"","what":"Check OR — checkor","title":"Check OR — checkor","text":"Checks least one check passes.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/checkor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check OR — checkor","text":"","code":"checkor(..., error = TRUE)"},{"path":"https://poissonconsulting.github.io/checkr/reference/checkor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check OR — checkor","text":"... checks check. error flag indicating whether throw informative error immediately generate informative message check fails.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/checkor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check OR — checkor","text":"invisible flag indicating whether least one check passes (throw error).","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/checkor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check OR — checkor","text":"","code":"checkor(check_null(NULL), check_null(1), error = FALSE) #> Warning: `checkor()` was deprecated in checkr 0.5.1. #> ℹ Please use `chk::chkor()` instead. checkor(check_null(1), check_null(1), error = FALSE) #> Warning: 1 must be NULL checkor(check_null(1), check_null(2), error = FALSE) #> Warning: 1 must be NULL OR 2 must be NULL"},{"path":"https://poissonconsulting.github.io/checkr/reference/checkr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"checkr: Check the Properties of Common R Objects — checkr-package","title":"checkr: Check the Properties of Common R Objects — checkr-package","text":"Expressive, assertive, pipe-friendly functions check properties common R objects. case failure functions issue informative error messages. Superseded 'chk' package.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/checkr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"checkr: Check the Properties of Common R Objects — checkr-package","text":"Maintainer: Joe Thorley joe@poissonconsulting.ca (ORCID) contributors: Evan Amies-Galonski evan@poissonconsulting.ca (-3188) [contributor] Poisson Consulting [copyright holder, funder]","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_deparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Deparse — chk_deparse","title":"Deparse — chk_deparse","text":"chk_deparse wrapper deparse() sets missing value \"NA\"","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_deparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deparse — chk_deparse","text":"","code":"chk_deparse(x)"},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_deparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deparse — chk_deparse","text":"x substituted object deparse","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_deparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deparse — chk_deparse","text":"string","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_deparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deparse — chk_deparse","text":"","code":"chk_deparse(1^2) #> [1] \"1\""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_fail.html","id":null,"dir":"Reference","previous_headings":"","what":"Fail — chk_fail","title":"Fail — chk_fail","text":"Fail","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_fail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fail — chk_fail","text":"","code":"chk_fail(..., error)"},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_fail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fail — chk_fail","text":"... message. error flag indicating whether return error (default) warning.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_max_dbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Max Double — chk_max_dbl","title":"Max Double — chk_max_dbl","text":"Max Double","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_max_dbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Max Double — chk_max_dbl","text":"","code":"chk_max_dbl()"},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_max_dbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Max Double — chk_max_dbl","text":"dbl maximum numeric value system.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_max_dbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Max Double — chk_max_dbl","text":"","code":"chk_max_dbl() #> [1] 1.797693e+308"},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_max_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Max Int — chk_max_int","title":"Max Int — chk_max_int","text":"Max Int","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_max_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Max Int — chk_max_int","text":"","code":"chk_max_int()"},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_max_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Max Int — chk_max_int","text":"int maximum integer value system.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_max_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Max Int — chk_max_int","text":"","code":"chk_max_int() #> [1] 2147483647"},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_min_dbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Min Double — chk_min_dbl","title":"Min Double — chk_min_dbl","text":"Min Double","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_min_dbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Min Double — chk_min_dbl","text":"","code":"chk_min_dbl()"},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_min_dbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Min Double — chk_min_dbl","text":"dbl minimum numeric value system.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_min_dbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Min Double — chk_min_dbl","text":"","code":"chk_min_dbl() #> [1] -1.797693e+308"},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_min_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Min Integer — chk_min_int","title":"Min Integer — chk_min_int","text":"Min Integer","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_min_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Min Integer — chk_min_int","text":"","code":"chk_min_int()"},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_min_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Min Integer — chk_min_int","text":"int minimum integer value system.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_min_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Min Integer — chk_min_int","text":"","code":"chk_min_int() #> [1] -2147483647"},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_tiny_dbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Tiny Positive Double — chk_tiny_dbl","title":"Tiny Positive Double — chk_tiny_dbl","text":"Tiny Positive Double","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_tiny_dbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tiny Positive Double — chk_tiny_dbl","text":"","code":"chk_tiny_dbl()"},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_tiny_dbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tiny Positive Double — chk_tiny_dbl","text":"dbl tiniest positive numeric value system.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/chk_tiny_dbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tiny Positive Double — chk_tiny_dbl","text":"","code":"chk_tiny_dbl() #> [1] 2.225074e-308"},{"path":"https://poissonconsulting.github.io/checkr/reference/params.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for checkr functions — params","title":"Parameters for checkr functions — params","text":"Descriptions parameters checkr functions.","code":""},{"path":"https://poissonconsulting.github.io/checkr/reference/params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for checkr functions — params","text":"x object check. x_name string name object x. error flag indicating whether throw informative error immediately generate informative message check fails. pattern string regular expression. y_name string name object y. values NULL vector specifying values. exclusive flag indicating whether columns permitted. character vector named character vector columns join . colnames character vector column names. na_distinct flag specifying whether missing values considered distinct. sorted flag indicating whether vector must sorted. flag indicating whether actual values permitted. affects values two less non-missing elements. unique flag indicating whether values must unique. length flag indicating whether x elements (versus elements) missing value indicating requirements count count range number elements count vector permitted number elements. complete flag indicating whether possible names represented. coerce flag indicating whether coerce scalar integer dbl drop attributes including names. tzone string time zone. strict flag indicating whether objects must identical classes just share one classes. recursive flag indicating whether check applied recursively. ncol flag indicating whether x columns (versus columns) missing value indicating requirements count count range number columns. nlevels flag indicating whether x elements (versus elements) missing value indicating requirements count count range number elements. nrow flag indicating whether x rows (versus rows) missing value indicating requirements count count range number rows. nargs count number arguments count range minimum maximum number arguments. levels character vector levels.","code":""},{"path":"https://poissonconsulting.github.io/checkr/news/index.html","id":"checkr-050","dir":"Changelog","previous_headings":"","what":"checkr 0.5.0","title":"checkr 0.5.0","text":"CRAN release: 2019-04-25 fixed check_key columns added units testing added names = TRUE class = TRUE arguments check_attributes(), check_no_attributes() check_vector() added na_distinct = FALSE argument check_key replace internal deparse_x_name() exported chk_deparse() added check_name() check elements character vector syntactically valid name check_named() now gives 1 warning error = FALSE named removed check_tz()","code":""},{"path":"https://poissonconsulting.github.io/checkr/news/index.html","id":"checkr-040","dir":"Changelog","previous_headings":"","what":"checkr 0.4.0","title":"checkr 0.4.0","text":"CRAN release: 2018-11-01","code":""},{"path":"https://poissonconsulting.github.io/checkr/news/index.html","id":"major-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"checkr 0.4.0","text":"added err dependency message generation check_data argument values now NULL default (opposed missing) lengths including nrows ncols can now checked vector possible values coerce = TRUE now also strips attributes flag, int, dbl, string logical, integer, double, character.","code":""},{"path":"https://poissonconsulting.github.io/checkr/news/index.html","id":"exported-0-4-0","dir":"Changelog","previous_headings":"","what":"Exported","title":"checkr 0.4.0","text":"exported chk_deparse() deparse dealing NAs packages extend exported chk_fail() conditional error warning messages packages extend. exported chk_max_int(), chk_min_int(), chk_min_dbl(), chk_max_dbl() chk_tiny_dbl() get integer numeric ranges system.","code":""},{"path":"https://poissonconsulting.github.io/checkr/news/index.html","id":"new-functions-0-4-0","dir":"Changelog","previous_headings":"","what":"New Functions","title":"checkr 0.4.0","text":"added check_intersection() check intersection two atomic vectors added check_integer(), check_numeric(), check_double(), check_logical() check_character() added check_int() check_dbl() coercion added check_prob() check probability added check_pos_dbl(), check_neg_dbl() check_noneg_dbl() added check_pos_int(), check_neg_int() check_noneg_int() added check_attributes() check objects attributes check_no_attributes() added check_lgl(), check_chr(), check_day(), check_dttm() added check_grepl()","code":""},{"path":"https://poissonconsulting.github.io/checkr/news/index.html","id":"new-arguments-0-4-0","dir":"Changelog","previous_headings":"","what":"New Arguments","title":"checkr 0.4.0","text":"added attributes argument check_vector() check_scalar() now accept flag named added complete = TRUE argument check_names() added exclusive = FALSE order = FALSE check_list()","code":""},{"path":"https://poissonconsulting.github.io/checkr/news/index.html","id":"deprecated-0-4-0","dir":"Changelog","previous_headings":"","what":"Deprecated","title":"checkr 0.4.0","text":"deprecated unique = FALSE, length = NA named = NA check_list() checked values argument specific functions deprecated check_regex() check_pattern() (added check_grepl()) deprecated regex argument pattern argument deprecated check_flag_na()","code":""},{"path":"https://poissonconsulting.github.io/checkr/news/index.html","id":"checkr-030","dir":"Changelog","previous_headings":"","what":"checkr 0.3.0","title":"checkr 0.3.0","text":"CRAN release: 2018-06-27 redefined check_scalar (following previous deprecation) added = FALSE argument check_vector() check whether actual values permitted. added check_rbind() check two data frames can smoothly rbinded","code":""},{"path":"https://poissonconsulting.github.io/checkr/news/index.html","id":"checkr-020","dir":"Changelog","previous_headings":"","what":"checkr 0.2.0","title":"checkr 0.2.0","text":"CRAN release: 2018-03-26 deprecated check_tz() check_tzone() added check_unused() check ... unused within function added check_homogenous() check object’s elements class added check_flag_na() check scalar logical","code":""},{"path":"https://poissonconsulting.github.io/checkr/news/index.html","id":"checkr-010","dir":"Changelog","previous_headings":"","what":"checkr 0.1.0","title":"checkr 0.1.0","text":"CRAN release: 2018-03-02 added check_nchar() function check_vector() check_list() now allow named argument regular expression count range added nchar = c(0L, .Machine$max.integer) regex = \".*\" arguments check_named() added check_regex() function added all_y = TRUE argument check_join() check rows y join changed check_join() error message …join x y must include rows x opposed …join x y violates referential integrity added check_number() check object scalar real added assertive-programming vignette vector length now checked values lengths can now specified using TRUE, FALSE NA (# 2)","code":""},{"path":"https://poissonconsulting.github.io/checkr/news/index.html","id":"checkr-002","dir":"Changelog","previous_headings":"","what":"checkr 0.0.2","title":"checkr 0.0.2","text":"CRAN release: 2018-01-29 added check_inherits() check_classes() functions check_named() now checks unique unique = TRUE check_names() (check_colnames()) can now check names unique also accept names = character(0) (colnames = character(0))","code":""},{"path":"https://poissonconsulting.github.io/checkr/news/index.html","id":"checkr-001","dir":"Changelog","previous_headings":"","what":"checkr 0.0.1","title":"checkr 0.0.1","text":"first official release","code":""}]
